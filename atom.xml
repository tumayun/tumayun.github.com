<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tumayun's Blog]]></title>
  <link href="http://tumayun.com/atom.xml" rel="self"/>
  <link href="http://tumayun.com/"/>
  <updated>2014-09-03T17:23:11+08:00</updated>
  <id>http://tumayun.com/</id>
  <author>
    <name><![CDATA[tumayun]]></name>
    <email><![CDATA[tumayun.2010@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[日志分割]]></title>
    <link href="http://tumayun.com/2014-09-03/ri-zhi-fen-ge/"/>
    <updated>2014-09-03T16:30:42+08:00</updated>
    <id>http://tumayun.com/2014-09-03/ri-zhi-fen-ge</id>
    <content type="html"><![CDATA[<p>日志做分割是必须的，不然服务一直跑下去，某一天你会发现磁盘满了！下面就介绍下 logrotate 做日志分割的过程。</p>

<p>首先得安装 logrotate 。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install logrotate</span></code></pre></td></tr></table></div></figure>


<p>修改 logrotate 的配置文件。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo vim /etc/logrotate.conf
</span><span class='line'>
</span><span class='line'>/home/www/webapp/iconfont/shared/log/*.log {
</span><span class='line'>  daily         #按天分割
</span><span class='line'>  rotate 30     #分割的文件最多有 30 份，将删除较早的文件
</span><span class='line'>  missingok     #如果指定的文件不存在，不报错，继续下一个
</span><span class='line'>  dateext       #用日期作为分割后的文件后缀
</span><span class='line'>  compress      #对分割后的日志文件进行压缩
</span><span class='line'>  delaycompress #不压缩前一个(previous)分割的文件（需要与compress一起用）
</span><span class='line'>  copytruncate  #清空原有文件，而不是创建一个新文件
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>这样的话每天都会自动做日志分割，当然也可以强制执行。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo -vf logrotate -f /etc/logrotate.conf</span></code></pre></td></tr></table></div></figure>


<p>想了解 logrotate 的配置文件该怎么写，可以看 <a href="http://linuxers.org/howto/howto-use-logrotate-manage-log-files">http://linuxers.org/howto/howto-use-logrotate-manage-log-files</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 4 源码阅读之timestamps]]></title>
    <link href="http://tumayun.com/2013-06-29/rails-4-yuan-ma-yue-du-zhi-updated-ayu-created-at/"/>
    <updated>2013-06-29T19:20:00+08:00</updated>
    <id>http://tumayun.com/2013-06-29/rails-4-yuan-ma-yue-du-zhi-updated-ayu-created-at</id>
    <content type="html"><![CDATA[<p>最近开始看 Rails 4 的源码,打算写一系列的 Rails 4 源码阅读的文章,这是第一篇.</p>

<p>我是因为想知道 Rails 4 里面的 timestamps 是在什么时候赋值或者更新的,然后我翻看了下 Rails 4 的 ActiveRecord 代码.</p>

<p>在<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb">https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb</a>里面有<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb#L46">create_record</a>和<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb#L60">update_record</a>方法,更新这些<code>timestamps</code>的操作就在这个里面了.</p>

<p>恩,应该是这样.<code>update_record</code>与<code>create_record</code>分别是创建和更新必掉的方法,所以如果有 timestamps 并且开启了<code>record_timestamps</code>就会去赋值或者更新这些字段了.</p>

<p>其实也可以从<code>save</code>开始阅读,<code>save</code>的过程可以简化成这样.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/rails/rails/blob/master/activerecord/lib/active_record//connection_adapters/abstract/transaction.rb#L270</span>
</span><span class='line'><span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="n">rollback_active_record_state!</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">with_transaction_returning_status</span> <span class="p">{</span> <span class="k">super</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1"># https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods/dirty.rb#L31</span>
</span><span class='line'><span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">status</span> <span class="o">=</span> <span class="k">super</span>
</span><span class='line'>    <span class="vi">@previously_changed</span> <span class="o">=</span> <span class="n">changes</span>
</span><span class='line'>    <span class="vi">@changed_attributes</span><span class="o">.</span><span class="n">clear</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">status</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1"># https://github.com/rails/rails/blob/master/activerecord/lib/active_record/validations.rb#L56</span>
</span><span class='line'><span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>  <span class="n">perform_validations</span><span class="p">(</span><span class="n">options</span><span class="p">)</span> <span class="p">?</span> <span class="k">super</span> <span class="p">:</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1"># https://github.com/rails/rails/tree/master/activerecord/lib/activerecord/persistence.rb#L105</span>
</span><span class='line'><span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="o">*</span><span class="p">)</span>
</span><span class='line'>  <span class="n">create_or_update</span>
</span><span class='line'><span class="k">rescue</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordInvalid</span>
</span><span class='line'>  <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1"># https://github.com/rails/rails/tree/master/activerecord/lib/activerecord/callbacks.rb#L298</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create_or_update</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="n">run_callbacks</span><span class="p">(</span><span class="ss">:save</span><span class="p">)</span> <span class="p">{</span> <span class="k">super</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1"># https://github.com/rails/rails/tree/master/activerecord/lib/activerecord/persistence.rb#L464</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create_or_update</span>
</span><span class='line'>  <span class="k">raise</span> <span class="no">ReadOnlyRecord</span> <span class="k">if</span> <span class="n">readonly?</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">new_record?</span> <span class="p">?</span> <span class="n">create_record</span> <span class="p">:</span> <span class="n">update_record</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">!=</span> <span class="kp">false</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1"># https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb#L46</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create_record</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">record_timestamps</span>
</span><span class='line'>    <span class="n">current_time</span> <span class="o">=</span> <span class="n">current_time_from_proper_timezone</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">all_timestamp_attributes</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">column</span><span class="o">|</span>
</span><span class='line'>      <span class="k">if</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="n">column</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">respond_to?</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">column</span><span class="si">}</span><span class="s2">=&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">column</span><span class="p">)</span><span class="o">.</span><span class="n">nil?</span>
</span><span class='line'>        <span class="n">write_attribute</span><span class="p">(</span><span class="n">column</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="n">current_time</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">super</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1"># https://github.com/rails/rails/blob/master/activerecord/lib/active_record/callbacks.rb#L302</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create_record</span> <span class="c1">#:nodoc:</span>
</span><span class='line'>  <span class="n">run_callbacks</span><span class="p">(</span><span class="ss">:create</span><span class="p">)</span> <span class="p">{</span> <span class="k">super</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="o">.</span>
</span><span class='line'><span class="c1"># https://github.com/rails/rails/blob/master/activerecord/lib/active_record/persistence.rb#L483</span>
</span><span class='line'><span class="k">def</span> <span class="nf">create_record</span><span class="p">(</span><span class="n">attribute_names</span> <span class="o">=</span> <span class="vi">@attributes</span><span class="o">.</span><span class="n">keys</span><span class="p">)</span>
</span><span class='line'>  <span class="n">attributes_values</span> <span class="o">=</span> <span class="n">arel_attributes_with_values_for_create</span><span class="p">(</span><span class="n">attribute_names</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">new_id</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">unscoped</span><span class="o">.</span><span class="n">insert</span> <span class="n">attributes_values</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">id</span> <span class="o">||=</span> <span class="n">new_id</span> <span class="k">if</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">primary_key</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@new_record</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>  <span class="nb">id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>哇,就是这样的顺序,但是感觉有点复杂啊,<code>save</code>到处都是,通过<code>super</code>关键字逐层调用,就像一个<code>rack stack</code>一样!最主要的是我们要知道<code>save</code>的调用链是怎么样的,这个可以看<code>ActiveRecord::Base.ancestors</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">puts</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">ancestors</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Core</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Store</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Serialization</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializers</span><span class="o">::</span><span class="no">Xml</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializers</span><span class="o">::</span><span class="no">JSON</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serialization</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Reflection</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Transactions</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Aggregations</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">NestedAttributes</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AutosaveAssociation</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">SecurePassword</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Associations</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Timestamp</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">Validations</span><span class="o">::</span><span class="no">Callbacks</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Callbacks</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span><span class="o">::</span><span class="no">Serialization</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span><span class="o">::</span><span class="no">Dirty</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">Dirty</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span><span class="o">::</span><span class="no">TimeZoneConversion</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span><span class="o">::</span><span class="no">PrimaryKey</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span><span class="o">::</span><span class="no">Query</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span><span class="o">::</span><span class="no">BeforeTypeCast</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span><span class="o">::</span><span class="no">Write</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span><span class="o">::</span><span class="no">Read</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeMethods</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">AttributeMethods</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Locking</span><span class="o">::</span><span class="no">Pessimistic</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Locking</span><span class="o">::</span><span class="no">Optimistic</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">CounterCache</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Validations</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">Validations</span><span class="o">::</span><span class="no">HelperMethods</span>
</span><span class='line'><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Callbacks</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">Validations</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Integration</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">Conversion</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">AttributeAssignment</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">ForbiddenAttributesProtection</span>
</span><span class='line'><span class="no">ActiveModel</span><span class="o">::</span><span class="no">DeprecatedMassAssignmentSecurity</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Sanitization</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Scoping</span><span class="o">::</span><span class="no">Named</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Scoping</span><span class="o">::</span><span class="no">Default</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Scoping</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Inheritance</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">ModelSchema</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">ReadonlyAttributes</span>
</span><span class='line'><span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Persistence</span>
</span><span class='line'><span class="no">Object</span>
</span><span class='line'><span class="no">JSON</span><span class="o">::</span><span class="no">Ext</span><span class="o">::</span><span class="no">Generator</span><span class="o">::</span><span class="no">GeneratorMethods</span><span class="o">::</span><span class="no">Object</span>
</span><span class='line'><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Dependencies</span><span class="o">::</span><span class="no">Loadable</span>
</span><span class='line'><span class="no">PP</span><span class="o">::</span><span class="no">ObjectMixin</span>
</span><span class='line'><span class="no">Kernel</span>
</span><span class='line'><span class="no">BasicObject</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就能知道调用链的情况了.当然还可以去<code>debugger</code>.</p>

<p>恩,<code>save</code>就是这样!<code>timestamps</code>又明白了,太棒了~!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 技巧之 Safe Name]]></title>
    <link href="http://tumayun.com/2013-06-23/rails-ji-qiao-zhi-safe-name/"/>
    <updated>2013-06-23T23:51:00+08:00</updated>
    <id>http://tumayun.com/2013-06-23/rails-ji-qiao-zhi-safe-name</id>
    <content type="html"><![CDATA[<p>当使用元编程动态生成代码时,可能会有一些不符合命名规范的名称,那么就可以用到下面的技巧,姑且称之为<code>safe name</code>.</p>

<p>以下出自 Rails 源码 <a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods/read.rb#L50">define_method_attribute</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># We want to generate the methods via module_eval rather than</span>
</span><span class='line'><span class="c1"># define_method, because define_method is slower on dispatch and</span>
</span><span class='line'><span class="c1"># uses more memory (because it creates a closure).</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># But sometimes the database might return columns with</span>
</span><span class='line'><span class="c1"># characters that are not allowed in normal method names (like</span>
</span><span class='line'><span class="c1"># &#39;my_column(omg)&#39;. So to work around this we first define with</span>
</span><span class='line'><span class="c1"># the __temp__ identifier, and then use alias method to rename</span>
</span><span class='line'><span class="c1"># it to what we want.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># We are also defining a constant to hold the frozen string of</span>
</span><span class='line'><span class="c1"># the attribute name. Using a constant means that we do not have</span>
</span><span class='line'><span class="c1"># to allocate an object on each call to the attribute method.</span>
</span><span class='line'><span class="c1"># Making it frozen means that it doesn&#39;t get duped when used to</span>
</span><span class='line'><span class="c1"># key the @attributes_cache in read_attribute.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">define_method_attribute</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">safe_name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;h*&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="n">generated_attribute_methods</span><span class="o">.</span><span class="n">module_eval</span> <span class="o">&lt;&lt;-</span><span class="no">STR</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">,</span> <span class="bp">__LINE__</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'><span class="sh">  def __temp__#{safe_name}</span>
</span><span class='line'><span class="sh">  read_attribute(AttrNames::ATTR_#{safe_name}) { |n| missing_attribute(n, caller) }</span>
</span><span class='line'><span class="sh">  end</span>
</span><span class='line'><span class="sh">  alias_method #{name.inspect}, :__temp__#{safe_name}</span>
</span><span class='line'><span class="sh">  undef_method :__temp__#{safe_name}</span>
</span><span class='line'><span class="no">  STR</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>safe name</code>技巧的原理就是构造符合命名规范的名称(通过一些算法,像unpack,hash都可以),
  像这里的话是通过<code>unpack('h*')</code>生成一个字串<code>safe_name</code>.</p>

<p>  这个技巧真心很赞!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resque 同步执行]]></title>
    <link href="http://tumayun.com/2013-05-29/resque-tong-bu-zhi-xing/"/>
    <updated>2013-05-29T01:16:00+08:00</updated>
    <id>http://tumayun.com/2013-05-29/resque-tong-bu-zhi-xing</id>
    <content type="html"><![CDATA[<h3>背景</h3>

<p>测试的时候,有个方法里面调用了<code>Resque.enqueue</code>,我觉得不好测试.
可能有人会说只需要测试是否调用了<code>Resque.enqueue</code>,或者只需要测试<code>redis</code>里面是否有这个队列.
但是我觉得最好还是要测试到后台任务的执行结果,因为后台任务的最终结果可能就是这个方法的关键之处,是这个方法的主体.所以最好还是能去测试后台任务的结果(当然,视代价而定)!~</p>

<p>好了,回到正题.怎么去测试<code>Resque</code>任务的执行结果呢?额,开着后台<code>worker</code>?然后在测试代码里面<code>sleep 10</code>等待后台执行?我擦,太二了!</p>

<p>翻看了下<a href="https://github.com/resque/resque">Resque</a>的源码,发现了个好东西<a href="https://github.com/resque/resque/blob/master/lib/resque.rb#L119">inline</a>.</p>

<pre>
# If 'inline' is true Resque will call #perform method inline
# without queuing it into Redis and without any Resque callbacks.
# The 'inline' is false Resque jobs will be put in queue regularly.
</pre>


<p>大意就是</p>

<pre>
如果 inline 为 true, Resque 任务会直接执行不需要放到 redis 队列中，并且不执行任何 callbacks。 inline 是 false, Resque
任务将放在 redis 队列里面等待执行。
</pre>


<p>恩,nice!这个就是我想要的,同步执行!</p>

<h3>源码分析 inline</h3>

<p>首先要看压队列的方法 <a href="https://github.com/resque/resque/blob/master/lib/resque.rb#L245">Resque#enqueue</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">enqueue</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">enqueue_to</span><span class="p">(</span><span class="n">queue_from_class</span><span class="p">(</span><span class="n">klass</span><span class="p">),</span> <span class="n">klass</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法是将<code>job</code>压入<code>redis</code>队列.再看看 <a href="https://github.com/resque/resque/blob/master/lib/resque.rb#L336">queue_from_class</a>方法.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">queue_from_class</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">klass</span><span class="o">.</span><span class="n">instance_variable_defined?</span><span class="p">(</span><span class="ss">:@queue</span><span class="p">)</span>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="ss">:@queue</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="p">(</span><span class="n">klass</span><span class="o">.</span><span class="n">respond_to?</span><span class="p">(</span><span class="ss">:queue</span><span class="p">)</span> <span class="ow">and</span> <span class="n">klass</span><span class="o">.</span><span class="n">queue</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法是用来获取<code>job</code>对应的队列名的.</p>

<p>再回到<code>enqueue</code>方法,看看 <a href="https://github.com/resque/resque/blob/master/lib/resque.rb#L258">enqueue_to</a> 方法.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">enqueue_to</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">klass</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">validate</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># Perform before_enqueue hooks. Don&#39;t perform enqueue if any hook returns false</span>
</span><span class='line'>  <span class="n">before_hooks</span> <span class="o">=</span> <span class="no">Plugin</span><span class="o">.</span><span class="n">before_enqueue_hooks</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">hook</span><span class="o">|</span>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">hook</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">before_hooks</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">result</span><span class="o">|</span> <span class="n">result</span> <span class="o">==</span> <span class="kp">false</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Job</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">klass</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">Plugin</span><span class="o">.</span><span class="n">after_enqueue_hooks</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">hook</span><span class="o">|</span>
</span><span class='line'>    <span class="n">klass</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">hook</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法是去验证<code>job</code>,并且执行<code>hooks</code>,创建<code>job</code>.
先看看 <a href="https://github.com/resque/resque/blob/master/lib/resque.rb#L349">validate</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">validate</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">queue</span> <span class="o">=</span> <span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="n">queue</span> <span class="o">||=</span> <span class="n">queue_from_class</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">unless</span> <span class="n">queue</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NoQueueError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Jobs must be placed onto a queue.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">klass</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">empty?</span>
</span><span class='line'>    <span class="k">raise</span> <span class="no">NoClassError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;Jobs must be given a class.&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法是去校验是否有队列名以及<code>job class</code>.</p>

<p>再看看 <a href="https://github.com/resque/resque/blob/master/lib/resque/plugin.rb#L64">Plugin.before_enqueue_hooks</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Given an object, returns a list `before_enqueue` hook names.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">before_enqueue_hooks</span><span class="p">(</span><span class="n">job</span><span class="p">)</span>
</span><span class='line'>  <span class="n">get_hook_names</span><span class="p">(</span><span class="n">job</span><span class="p">,</span> <span class="s1">&#39;before_enqueue&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="k">return</span> <span class="kp">nil</span> <span class="k">if</span> <span class="n">before_hooks</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">result</span><span class="o">|</span> <span class="n">result</span> <span class="o">==</span> <span class="kp">false</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个方法是获取<code>before_enqueue hook</code>的列表.然后</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">before_hooks</span> <span class="o">=</span> <span class="no">Plugin</span><span class="o">.</span><span class="n">before_enqueue_hooks</span><span class="p">(</span><span class="n">klass</span><span class="p">)</span><span class="o">.</span><span class="n">collect</span> <span class="k">do</span> <span class="o">|</span><span class="n">hook</span><span class="o">|</span>
</span><span class='line'>  <span class="n">klass</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">hook</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码会去执行所有的<code>before_enqueue hook</code>,并且校验所有<code>before_enqueue hook</code>执行结果,如果有为<code>false</code>,则直接<code>return</code>,否则创建<code>job</code>,并且执行所有的<code>after_enqueue hook</code>.</p>

<p>我们再仔细看看 <a href="https://github.com/resque/resque/blob/master/lib/resque/job.rb#L40">Job.create</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Creates a job by placing it on a queue. Expects a string queue</span>
</span><span class='line'><span class="c1"># name, a string class name, and an optional array of arguments to</span>
</span><span class='line'><span class="c1"># pass to the class&#39; `perform` method.</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1"># Raises an exception if no queue or class is given.</span>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="n">klass</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">coder</span> <span class="o">=</span> <span class="no">Resque</span><span class="o">.</span><span class="n">coderhttps</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">resque</span><span class="o">/</span><span class="n">resque</span><span class="o">/</span><span class="n">blob</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">resque</span><span class="o">/</span><span class="n">json_coder</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>  <span class="no">Resque</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">klass</span><span class="p">,</span> <span class="n">queue</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">Resque</span><span class="o">.</span><span class="n">inline?</span>
</span><span class='line'>    <span class="c1"># Instantiating a Resque::Job and calling perform on it so callbacks run</span>
</span><span class='line'>    <span class="c1"># decode(encode(args)) to ensure that args are normalized in the same</span>
</span><span class='line'>    <span class="c1"># manner as a non-inline job</span>
</span><span class='line'>    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="n">klass</span><span class="p">,</span> <span class="s1">&#39;args&#39;</span> <span class="o">=&gt;</span> <span class="n">coder</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="n">coder</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">args</span><span class="p">))}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kp">new</span><span class="p">(</span><span class="ss">:inline</span><span class="p">,</span> <span class="n">payload</span><span class="p">)</span><span class="o">.</span><span class="n">perform</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="no">Resque</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">queue</span><span class="p">,</span> <span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="n">klass</span><span class="o">.</span><span class="n">to_s</span><span class="p">,</span> <span class="s1">&#39;args&#39;</span> <span class="o">=&gt;</span> <span class="n">args</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>关键的地方来了!!!  <br/>
额,先稍等,一步一步来.</p>

<h5>coder</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#https://github.com/resque/resque/blob/master/lib/resque.rb#L84</span>
</span><span class='line'><span class="c1"># Encapsulation of encode/decode. Overwrite this to use it across Resque.</span>
</span><span class='line'><span class="c1"># This defaults to JSON for backwards compatibility.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">coder</span>
</span><span class='line'>  <span class="vi">@coder</span> <span class="o">||=</span> <span class="no">JsonCoder</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>不难看出,是用来解析队列参数<code>args</code>的,这里默认是 <a href="https://github.com/resque/resque/blob/master/lib/resque/json_coder.rb">JsonCoder</a>,
用<code>JSON</code>来解析参数.</p>

<h5>Resque.validate</h5>

<p>前文已经讲过,用来校验队列名以及<code>job class</code>.</p>

<h5>Resque.push</h5>

<p>如果非<code>inline</code>,将<code>job</code>压入队列,等待异步执行.</p>

<h5>perform</h5>

<p>如果<code>inline</code>,直接执行<code>job</code>.可以具体看看是怎么执行的.  <br/>
先获取<code>job</code>参数,再用参数<code>new</code>一个<code>job</code>出来,然后执行<code>perform</code>方法.关键就在<code>perform</code>方法,这个方法就是去真正执行<code>job</code>了.  <br/>
下面再来具体看看到底是怎么<code>perform</code>的.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># https://github.com/resque/resque/blob/master/lib/resque/job.rb#L134</span>
</span><span class='line'><span class="c1"># Attempts to perform the work represented by this job instance.</span>
</span><span class='line'><span class="c1"># Calls #perform on the class given in the payload with the</span>
</span><span class='line'><span class="c1"># arguments given in the payload.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">perform</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:before</span> <span class="o">=&gt;</span> <span class="n">before_hooks</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:around</span> <span class="o">=&gt;</span> <span class="n">around_hooks</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:after</span> <span class="o">=&gt;</span> <span class="n">after_hooks</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="no">JobPerformer</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="n">payload_class</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">hooks</span><span class="p">)</span>
</span><span class='line'>    <span class="c1"># If an exception occurs during the job execution, look for an</span>
</span><span class='line'>    <span class="c1"># on_failure hook then re-raise.</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Object</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>    <span class="n">run_failure_hooks</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="k">raise</span> <span class="n">e</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#  https://github.com/resque/resque/blob/master/lib/resque/job_performer.rb#L12</span>
</span><span class='line'><span class="c1"># This is the actual performer for a single unit of work.  It&#39;s called</span>
</span><span class='line'><span class="c1"># by Resque::Job#perform</span>
</span><span class='line'><span class="c1"># Args:</span>
</span><span class='line'><span class="c1">#   palyoad_class: The class to call ::perform on</span>
</span><span class='line'><span class="c1">#   args: An array of args to pass to the payload_class::perform</span>
</span><span class='line'><span class="c1">#   hook: A hash with keys :before, :after and :around, all arrays of</span>
</span><span class='line'><span class="c1">#         methods to call on the payload class with args</span>
</span><span class='line'><span class="k">def</span> <span class="nf">perform</span><span class="p">(</span><span class="n">payload_class</span><span class="p">,</span> <span class="n">args</span><span class="p">,</span> <span class="n">hooks</span><span class="p">)</span>
</span><span class='line'>  <span class="vi">@job</span>      <span class="o">=</span> <span class="n">payload_class</span>
</span><span class='line'>  <span class="vi">@job_args</span> <span class="o">=</span> <span class="n">args</span> <span class="o">||</span> <span class="o">[]</span>
</span><span class='line'>  <span class="vi">@hooks</span>    <span class="o">=</span> <span class="n">hooks</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># before_hooks can raise a Resque::DontPerform exception</span>
</span><span class='line'>  <span class="c1"># in which case we exit this method, returning false (because</span>
</span><span class='line'>  <span class="c1"># the job was never performed)</span>
</span><span class='line'>  <span class="k">return</span> <span class="kp">false</span> <span class="k">unless</span> <span class="n">call_before_hooks</span>
</span><span class='line'>  <span class="n">execute_job</span>
</span><span class='line'>  <span class="n">call_hooks</span><span class="p">(</span><span class="ss">:after</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">performed?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># https://github.com/resque/resque/blob/master/lib/resque/job_performer.rb#L28</span>
</span><span class='line'><span class="k">def</span> <span class="nf">call_before_hooks</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">call_hooks</span><span class="p">(</span><span class="ss">:before</span><span class="p">)</span>
</span><span class='line'>    <span class="kp">true</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="no">Resque</span><span class="o">::</span><span class="no">DontPerform</span>
</span><span class='line'>    <span class="kp">false</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># https://github.com/resque/resque/blob/master/lib/resque/job_performer.rb#L37</span>
</span><span class='line'><span class="k">def</span> <span class="nf">execute_job</span>
</span><span class='line'>  <span class="c1"># Execute the job. Do it in an around_perform hook if available.</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">hooks</span><span class="o">[</span><span class="ss">:around</span><span class="o">].</span><span class="n">empty?</span>
</span><span class='line'>    <span class="n">perform_job</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">call_around_hooks</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># https://github.com/resque/resque/blob/master/lib/resque/job_performer.rb#L67</span>
</span><span class='line'><span class="k">def</span> <span class="nf">perform_job</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="n">job</span><span class="o">.</span><span class="n">perform</span><span class="p">(</span><span class="o">*</span><span class="n">job_args</span><span class="p">)</span>
</span><span class='line'>  <span class="n">job_performed</span>
</span><span class='line'>  <span class="n">result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>由上述代码可以看出,其实真正执行的方法还是<code>job class</code>的<code>perform</code>方法,并且会去执行诸如<code>before_perform</code> <code>around_perform</code> <code>after_perform</code>等为前缀的<code>job class</code>方法.
整个<code>Resque</code>同步执行的过程就是这样!</p>

<h3>但是</h3>

<p>看完代码之后,我直接提了个<a href="https://github.com/resque/resque/issues/1026">issue</a>,
不知道是不是没开发完还是怎么回事!<code>inline</code>的描述和真实的行为竟然不一样!!!<code>inline</code>为<code>true</code>,还是会去执行<code>callbacks</code>!</p>

<h3>最后</h3>

<p>看了这篇文章后,脑子里应该能有一个大概的流程图,知道<code>Resque</code>大概的执行过程,这样我的目标就算达到了.后面我会再写一篇<em>Resque 异步执行</em>的文章,其实都是一样的,这个留到下次文章再分析.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let Let! Subject Subject! 的区别]]></title>
    <link href="http://tumayun.com/2013-03-13/let-let-subject-subject-de-qu-bie/"/>
    <updated>2013-03-13T13:56:00+08:00</updated>
    <id>http://tumayun.com/2013-03-13/let-let-subject-subject-de-qu-bie</id>
    <content type="html"><![CDATA[<p>当我遇到不明白的事物的时候，我会先看表象，了解到表象后，再深入了解其内部。不能说这种方法好，但是对我来说还是挺有效的（年轻的coder）。当然，最好还是直接深入内部去了解，这样更省事省时。<br/>
到正题，<a href="https://www.relishapp.com/rspec/rspec-core/v/2-13/docs/helper-methods/let-and-let!" title="let-and-let!">let 与 let的说明</a>如下：</p>

<pre><code>Use let to define a memoized helper method. The value will be cached
across multiple calls in the same example but not across examples.

Note that let is lazy-evaluated: it is not evaluated until the first time
the method it defines is invoked. You can use let! to force the method's
invocation before each example.
</code></pre>

<p>其实 <code>let</code> <code>let!</code> 以及 <code>subject</code> 都是 memoized_helpers，都是通过委托来定义一个消息的接收方！好处就是可以让代码更精炼，提高可读性，减少重复。  <br/>
要比较三者间的区别，必须先聊聊<code>let</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">let</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># We have to pass the block directly to `define_method` to</span>
</span><span class='line'>  <span class="c1"># allow it to use method constructs like `super` and `return`.</span>
</span><span class='line'>  <span class="no">MemoizedHelpers</span><span class="o">.</span><span class="n">module_for</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span><span class="o">.</span><span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Apply the memoization. The method has been defined in an ancestor</span>
</span><span class='line'>  <span class="c1"># module so we can use `super` here to get the value.</span>
</span><span class='line'>  <span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">__memoized</span><span class="o">.</span><span class="n">fetch</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="o">|</span> <span class="n">__memoized</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="k">super</span><span class="p">(</span><span class="o">&amp;</span><span class="kp">nil</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先定义一个<code>MemoizedHelpers</code>，就是<code>memoize method</code>，只要调用过，就会被缓存起来，下次调用还是返回上次相同的对象。
验证起来也很简单，可以看看两次调用结果的 <code>object_id</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span> <span class="s1">&#39;test user&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">user</span><span class="o">.</span><span class="n">object_id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果：
    70186054302440
    70186054302440</p>

<h3>四者间的区别</h3>

<p>首先上源码吧！ <a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L177" title="let">let</a> 源码上面已经贴了，
接下来看看 <a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L242" title="let!">let!</a>
<a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L276" title="subject">subject</a>
<a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L342" title="subject!">subject!</a>的源码。</p>

<h4>let!</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">let!</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">let</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">before</span> <span class="p">{</span> <span class="nb">__send__</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>subject</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">subject</span><span class="p">(</span><span class="nb">name</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">name</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>    <span class="n">subject</span> <span class="p">{</span> <span class="nb">__send__</span> <span class="nb">name</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">self</span><span class="o">::</span><span class="no">NamedSubjectPreventSuper</span><span class="o">.</span><span class="n">define_method</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">raise</span> <span class="no">NotImplementedError</span><span class="p">,</span> <span class="s2">&quot;`super` in named subjects is not supported&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">let</span><span class="p">(</span><span class="ss">:subject</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看得出，<code>let!</code>其实也是调用<code>let</code>，并且在<code>before each</code>调用，区别就是<code>let!</code>会在<code>before each</code>调用，而<code>let</code>不会，区别仅此而已！
<code>subject</code>就稍微的复杂了一点，首先如果<code>subject</code>指定了 name ，则会先用<code>let</code>生成一个叫 name 的 <code>memoize method</code>，然后再次用<code>let</code>生成一个叫 subject 的<code>memoize method</code>。这样当调用 subject 的时候，其实最终调用的是 name 这个<code>memoize method</code>。当<code>subject</code>没有指定 name 的时候，则生成用<code>let</code>直接生成一个名叫 subject 的<code>memoize method</code>。额，是不是有点乱？其实细细体味一下这个方法，哇塞，真的很棒，还这么精炼！用到了递归，哈哈！但是我又有点奇怪，为什么要多此一聚呢，而不直接用<code>let</code>。恩，看源码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">should</span><span class="p">(</span><span class="n">matcher</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="n">message</span><span class="o">=</span><span class="kp">nil</span><span class="p">)</span>
</span><span class='line'>  <span class="no">RSpec</span><span class="o">::</span><span class="no">Expectations</span><span class="o">::</span><span class="no">PositiveExpectationHandler</span><span class="o">.</span><span class="n">handle_matcher</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="n">matcher</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>原来，<code>subject</code> 是用来配合 <code>should</code> 进行隐式调用的，在这里何为隐式调用？看源码里面的例子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">CheckingAccount</span><span class="p">,</span> <span class="s2">&quot;with $50&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">CheckingAccount</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="ss">:USD</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should</span> <span class="n">have_a_balance_of</span><span class="p">(</span><span class="no">Money</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">50</span><span class="p">,</span> <span class="ss">:USD</span><span class="p">))</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">it</span> <span class="p">{</span> <span class="n">should_not</span> <span class="n">be_overdrawn</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>恩，<code>rspec</code>设计的就是这么巧妙！</p>

<h4>subject!</h4>

<p>这个就不需要多说了，也就是比<code>subject</code>多了句<code>before each</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">subject!</span><span class="p">(</span><span class="nb">name</span><span class="o">=</span><span class="kp">nil</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">subject</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'>  <span class="n">before</span> <span class="p">{</span> <span class="n">subject</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>总结</h3>

<p>其实什么时候用<code>let</code> <code>subject</code>，这个可以根据字面意思来，如果是测试主题，并且需要多次调用，就可有写成一个<code>subject</code>。而非测试主题，又需要多次调用，则可以用<code>let</code>！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 函数式编程 by Arnau Sanchez]]></title>
    <link href="http://tumayun.com/2013-02-22/ruby-han-shu-shi-bian-cheng-by-arnau-sanchez/"/>
    <updated>2013-02-22T14:12:00+08:00</updated>
    <id>http://tumayun.com/2013-02-22/ruby-han-shu-shi-bian-cheng-by-arnau-sanchez</id>
    <content type="html"><![CDATA[<p>本文档翻译自 Arnau Sanchez (tokland)所编译的这份文档 <a href="http://code.google.com/p/tokland/wiki/RubyFunctionalProgramming">RubyFunctionalProgramming</a>。</p>

<p>同时也有<a href="http://www.h6.dion.ne.jp/~machan/misc/FPwithRuby.html">日文版本</a>。</p>

<h2>目录</h2>

<ul>
<li><a href="#-1">简介</a></li>
<li><a href="#-2">理论部分</a></li>
<li><a href="#ruby">Ruby的函数式编程</a></li>
<li><a href="#-3">不要更新变量</a></li>
<li><a href="#-blocks-">用 Blocks 作为高阶函数</a></li>
<li><a href="#-6">面向对象与函数式编程</a></li>
<li><a href="#-7">万物皆表达式</a></li>
<li><a href="#-8">递归</a></li>
<li><a href="#-9">惰性枚举器</a></li>
<li><a href="#-11">一个实际的例子</a></li>
<li><a href="#-12">结论</a></li>
<li><a href="#-13">简报</a></li>
<li><a href="#-14">延伸阅读</a></li>
</ul>


<h2>简介</h2>

<blockquote><p>命令式编程比较牛吗？
不！不！不！只是比较快，比较简单，比较诱人而已。</p></blockquote>

<p>  x = x + 1</p>

<p>  在以前上小学的美好回忆裡，我们可能都曾对上面这行感到疑惑。这个 <code>x</code> 到底是什么呢？为什么加了一之后，<code>x</code> 仍然还是 <code>x</code>。</p>

<p>  不知道为什么，我们就开始写程序了，也就不在乎这是为什么了。心想：“嗯”，“这不是什么大问题，编程就是事情做完最重要，没有必要去挑剔数学的纯粹性 （让大学裡的大鬍子教兽们去烦恼就好）” 。但我们错了，也因此付出极高的代价，只因我们不了解它。</p>

<h2>理论部分</h2>

<p>  <a href="http://en.wikipedia.org/wiki/Functional_programming">维基百科</a>的解释：“函数式编程是一种写程序的范式，将计算视为对数学函数的求值，并避免使用状态及可变的数据” 换句话说，函数式编程提倡没有副作用的代码，不改变变量的值。这与命令式编程相反，命令式编程强调改变状态。</p>

<p>  令人惊讶的是，函数式编程就这样而已。那…有什么好处呢？</p>

<ul>
<li><p>更简洁的代码：“变量”一旦定义之后就不再改动，所以我们不需要追踪变量的状态，就可以理解一个函数、方法、类别、甚至是整个项目是怎么工作的。</p></li>
<li><p>引用透明：表达式可以用本身的值换掉。如果我们用同样的参数调用一个函数，我们确信输出会是一样的结果（没有其它的状态可改变它的值）。这也是为什么爱因斯坦说：“重复做一样的事却期望不同的结果”是疯狂的理由。</p></li>
</ul>


<p>  引用透明打开了前往某些美妙事物的大门</p>

<ul>
<li><p>并行化：如果调用函数是各自独立的，则他们可以在不同的进程甚至是机器裡执行，而不会有竞态条件的问题。“平常” 写并发程序讨厌的细节（锁、semaphore…等）在函数式编程裡面通通消失不见了。</p></li>
<li><p>记忆化：由于函数调用的结果等于它的返回值，我们可以把这些值缓存起来。</p></li>
<li><p>模组化：代码裡不存有状态，所以我们可以将项目用小的黑箱连结起来，函数式编程提倡自底向上的编程风格。</p></li>
<li><p>容易调试：函数彼此互相隔离，只依赖输入与输出，所以很容易调试。</p></li>
</ul>


<h2>Ruby的函数式编程</h2>

<p>  一切都是这么美好，但怎样才能将函数式编程，应用到每天写 Ruby（Ruby 不是个函数式语言）的程序开发裡呢？函数式编程广义来说，是一种风格，可以用在任何语言。当然啦，用在特别为这种范式打造的语言裡显得更自然，但某种程度上来说，可以应用到任何语言。</p>

<p>  让我们先釐清这一点：本文没有要提倡古怪的风格，比如仅仅为了要延续理论函数式编程的纯粹性所带来的古怪风格。反之，我想说的重点是，我们应该 <strong>当可以提昇代码的品质的时候，才使用函数式编程</strong> ，不然这只不过是个糟糕的解决办法。</p>

<h3>不要更新变量</h3>

<p>  别更新它们，创造新的变量。</p>

<h4>不要对数组或字串做 <code>append</code></h4>

<p>  No:</p>

<pre><code class="``Ruby">  indexes = [1, 2, 3]
  indexes &lt;&lt; 4
  indexes # [1, 2, 3, 4]
</code></pre>

<p>  Yes：</p>

<pre><code class="``Ruby">  indexes = [1, 2, 3]
  all_indexes = indexes + [4] # [1, 2, 3, 4]
</code></pre>

<h4>不要更新 hash</h4>

<p>  No:</p>

<pre><code class="``Ruby">  hash = {:a =&gt; 1, :b =&gt; 2}
  hash[:c] = 3
  hash
</code></pre>

<p>  Yes:</p>

<pre><code class="``Ruby">  hash = {:a =&gt; 1, :b =&gt; 2}
new_hash = hash.merge(:c =&gt; 3)
</code></pre>

<h4>牵扯到内存位置的地方，不要使用破坏性方法。</h4>

<p>  No:</p>

<pre><code class="``Ruby">  string = "hello"
  string.gsub!(/l/, 'z')
  string # "hezzo"
</code></pre>

<p>  Yes:</p>

<pre><code class="``Ruby">  string = "hello"
  new_string =  string.gsub(/l/, 'z') # "hezzo"
</code></pre>

<h4>如何累积值</h4>

<p>  No:</p>

<pre><code class="``Ruby">  output = []
  output &lt;&lt; 1
  output &lt;&lt; 2 if i_have_to_add_two
  output &lt;&lt; 3
</code></pre>

<p>  Yes:</p>

<pre><code class="``Ruby">  output = [1, (2 if i_have_to_add_two), 3].compact
</code></pre>

<h3>用 Blocks 作为高阶函数</h3>

<p>  如果一个语言要搞函数式，会需要高阶函数。高阶函数是什么？函数可以接受别的函数作为参数，并可以返回函数，就这么简单。</p>

<p>  Ruby (与 Smalltalk 还有其它语言）在这个方面上非常特别，语言本身就内置这个功能： <strong>blocks</strong> 区块。区块是一段匿名的代码，你可以随意的传来传去或是执行它。让我们看区块的典型用途，来构造函数式编程的构造子。</p>

<h4>init-empty + each + push = map</h4>

<pre><code>  No:

  ```Ruby
  dogs = []
  ["milu", "rantanplan"].each do |name|
  dogs &lt;&lt; name.upcase
  end
  dogs # =&gt; ["MILU", "RANTANPLAN"]
  ```

  Yes:

  ```Ruby
  dogs = ["milu", "rantanplan"].map do |name|
  name.upcase
  end # =&gt; ["MILU", "RANTANPLAN"]
  ```
</code></pre>

<h4>init-empty + each + conditional push -> select/reject</h4>

<p>  No:</p>

<pre><code class="``Ruby">  dogs = []
  ["milu", "rantanplan"].each do |name|
  if name.size == 4
  dogs &lt;&lt; name
  end
  end
  dogs # =&gt; ["milu"]
</code></pre>

<p>  Yes:</p>

<pre><code class="``Ruby">  dogs = ["milu", "rantanplan"].select do |name|
  name.size == 4
  end # =&gt; ["milu"]
</code></pre>

<h4>initialize + each + accumulate -> inject</h4>

<p>  No:</p>

<pre><code class="``Ruby">  length = 0
  ["milu", "rantanplan"].each do |dog_name|
  length += dog_name.length
  end
  length # =&gt; 15
</code></pre>

<p>  Yes:</p>

<pre><code class="``Ruby">  length = ["milu", "rantanplan"].inject(0) do |accumulator, dog_name|
  accumulator + dog_name.length
  end # =&gt; 15
</code></pre>

<p>  在这个特殊情况下，当累积器与元素之间有操作进行时，我们不需要区块，只要将操作传给符号即可。</p>

<pre><code class="``Ruby">  length = ["milu", "rantanplan"].map(&amp;:length).inject(0, :+) # 15
</code></pre>

<h4>empty + each + accumulate + push -> scan</h4>

<p>  想像一下，你不仅想要摺迭(fold)的结果，也想要过程中产生的部分数值。用命令式编程风格，你可能会这么写：</p>

<pre><code class="``Ruby">  lengths = []
  total_length = 0
  ["milu", "rantanplan"].each do |dog_name|
  lengths &lt;&lt; total_length
  total_length += dog_name.length
  end
  lengths # [0, 4, 15]
</code></pre>

<p>  在函数式的世界裡，Haskell 称之为 <a href="http://zvon.org/other/haskell/Outputprelude/scanl_f.html">scan</a>, C++ 称之为 <a href="http://www.cplusplus.com/reference/std/numeric/partial_sum/">partial_sum</a>, Clojure 称之为 <a href="http://clojuredocs.org/clojure_core/clojure.core/reductions">reductions</a>。</p>

<p>  令人讶异的是，Ruby 居然没有这样的函数！让我们自己写一个。这个怎么样：</p>

<pre><code class="``Ruby">  lengths = ["milu", "rantanplan"].partial_inject(0) do |dog_name|
  dog_name.length
  end # [0, 4, 15]
</code></pre>

<p>  Enumerable#partial_inject 可以这么实现：</p>

<pre><code class="``Ruby">  module Enumerable
def partial_inject(initial_value, &amp;block)
  self.inject([initial_value, [initial_value]]) do |(accumulated, output), element|
new_value = yield(accumulated, element)
  [new_value, output &lt;&lt; new_value]
  end[1]
  end
  end
</code></pre>

<p>  实作的细节不重要，重要的是，当认出一个有趣的模式可以被抽象化时，我们将其写在另一个函式库，撰写文档，反覆测试。现在只要让实际的需求去完善你的扩充即可。</p>

<h4>initial assign + conditional assign + conditional assign + &hellip;</h4>

<p>  这样的程序我们常常看到：</p>

<pre><code class="``Ruby">  name = obj1.name
  name = obj2.name if !name
  name = ask_name if !name
</code></pre>

<p>  在此时你应该觉得这样的代码使你很不自在（一个变量一下是这个值，一下是这个；变量名 <code>name</code> 到处都是…等）。函数式的方式更简短，也更简洁：</p>

<pre><code class="``Ruby">  name = obj1.name || obj2.name || ask_name
</code></pre>

<p>  另一个有更复杂条件的例子：</p>

<pre><code class="``Ruby">def get_best_object(obj1, obj2, obj3)
  return obj1 if obj1.price &lt; 20
  return obj2 if obj2.quality &gt; 3
  obj3
  end
</code></pre>

<p>  可以写成像是这样的一个表达式：</p>

<pre><code class="``Ruby">def get_best_object(obj1, obj2, obj3)
  if obj1.price &lt; 20
  obj1
  elsif obj2.quality &gt; 3
  obj2
  else
  obj3
  end
  end
</code></pre>

<p>  确实有一点囉嗦，但逻辑比一堆行内 <code>if/unless</code> 来得清楚。经验法则告诉我们，仅在你确定会用到副作用时，使用行内条件式，而不是在变量赋值或返回的场合使用：</p>

<pre><code class="``Ruby">country = Country.find(1)
  country.invade if country.has_oil?
# more code here
</code></pre>

<h4>如何从 enumerable 创造一个 hash</h4>

<p>  Vanilla Ruby 没有从 Enumerable 转到 Hash 的直接对应（本人认为是一个遗憾的缺陷）。这也是为什么新手持续写出下面这个糟糕的模式(而你怎么能责怪他们呢？唉！）：</p>

<pre><code>  ```Ruby
  hash = {}
  input.each do |item|
  hash[item] = process(item)
  end
  hash
  ```

  这真的非常可怕！阿～～～！但手边有没有更好的办法呢？过去 Hash 构造子需要一个有着连续键值对的 flatten 集合 （阿，用 flatten 数组来描述映射？Lisp 曾这么做，但还是很丑陋）。幸运的是，Ruby 的最新版本也接受键值对，这样更有意义（作为 `hash.to_a` 的逆操作），现在你可以这么写：

  ```Ruby
  Hash[input.map do |item|
  [item, process(item)]
  end]
  ```

  不赖嘛，但这打破了平常的撰写顺序。在 Ruby 我们期望从左向右写，给对象调用方法。而“好的”函数式方式是使用 `inject`：

  ```Ruby
</code></pre>

<p>  input.inject({}) do |hash, item|
hash.merge(item => process(item))
  end
  &#8220;`</p>

<p>  我们都同意这还是很囉嗦，所以我们最好将它放在 Enumerable 模组，<a href="http://rubyworks.github.com/facets/">Facets</a> 正是这么干的。它称之为 Enumerable#mash：</p>

<pre><code class="``Ruby">  module Enumerable
def mash(&amp;block)
  self.inject({}) do |output, item|
  key, value = block_given? ? yield(item) : item
output.merge(key =&gt; value)
  end
  end
  end
</code></pre>

<pre><code class="``Ruby">  ["functional", "programming", "rules"].map { |s| [s, s.length] }.mash
# {"rules"=&gt;5, "programming"=&gt;11, "functional"=&gt;10}
</code></pre>

<p>  或使用 <code>mash</code> 及 选择性区块来一步完成：</p>

<pre><code class="``Ruby">  ["functional", "programming", "rules"].mash { |s| [s, s.length] }
# {"rules"=&gt;5, "programming"=&gt;11, "functional"=&gt;10}
</code></pre>

<h3>面向对象与函数式编程</h3>

<p>  <a href="http://www.sics.se/~joe/">Joe Armstrong</a> (Erlang 发明人) 在 “Coders At work” 谈论过面向对象编程的重用性：</p>

<p>  “我认为缺少重用性是面向对象语言造成的，而不是函数式语言。面向对象语言的问题是，它们带着语言执行环境的所有隐含资讯四处乱窜。你想要的是香蕉，但看到的却是香蕉拿在大猩猩手裡，而大猩猩的后面是整个丛林”</p>

<p>  公平点说，我的看法是这不是面向对象编程的本质问题。你可以写出函数式的面向对象程序，但确定的是：</p>

<ul>
<li>典型的 OOP 倾向强调改变对象的状态。</li>
<li>典型的 OOP 倾向层与层之间紧密的耦合。</li>
<li>典型的 OOP 将同一性(identity)与状态的概念搞溷了。</li>
<li>数据与代码的混合物，导致了概念与实际的问题产生。</li>
</ul>


<p>  <a href="https://twitter.com/richhickey">Rich Hickey</a>，Clojure 的发明人（一个给 JVM 用的函数式 Lisp 方言），在这场<a href="http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey">出色的演讲</a>裡谈论了状态、数值以及同一性。</p>

<h3>万物皆表达式</h3>

<p>  可以这么写：</p>

<pre><code class="``Ruby">  if found_dog == our_dog
  name = found_dog.name
  message = "We found our dog #{name}!"
  else
  message = "No luck"
  end
</code></pre>

<p>  然而，控制结构（<code>if</code>, <code>while</code>, <code>case</code> 等）也返回表达式，所以只要这样写就好：</p>

<pre><code class="``Ruby">  message = if found_dog == my_dog
  name = found_dog.name
  "We found our dog #{name}!"
  else
  "No luck"
  end
</code></pre>

<p>  这样子我们不用重复变量名 <code>message</code>，企图也更明显：当有段长的程序（用了一堆我们不在乎的变量），我们可以专注在程序在干什么（返回讯息）。再强调一次，我们在缩小程序的作用域。</p>

<p>  另一个函数式程序的好处是，表达式可以用来构造数据：</p>

<p>  &#8220;`Ruby
{
  :name => &ldquo;M.Cassatt&rdquo;,
    :paintings => paintings.select { |p| p.author == &ldquo;M.Cassatt&rdquo; },
    :birth => painters.detect { |p| p.name == &ldquo;M.Cassatt&rdquo; }.birth.year,
    &hellip;
}</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>### 递归
</span><span class='line'>
</span><span class='line'>纯函数式语言没有隐含的状态，大量利用了递归。要避免栈溢出，函数式使用一种称为尾递归优化(TCO)的机制。Ruby 1.9 有实作这种机制，但缺省没有打开。要是你希望你的程序，在哪都可以动的话，就不要使用它。
</span><span class='line'>
</span><span class='line'>但是某些情况下，递归仍然是很有用的，即便是每次递归时都创建新的栈。注意！某些递归的用途可以用 foldings 来实现(像 Enumerable#inject)。
</span><span class='line'>
</span><span class='line'>在 MRI-1.9 启用 TCO：
</span></code></pre></td></tr></table></div></figure>


<p>Ruby
RubyVM::InstructionSequence.compile_option = {
  :tailcall_optimization => true,
  :trace_instruction => false,
}</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>简单例子：
</span></code></pre></td></tr></table></div></figure>


<p>Ruby
  module Math
  def self.factorial_tco(n, acc=1)
n &lt; 1 ? acc : factorial_tco(n-1, n*acc)
  end
  end
  &#8220;`</p>

<p>  在递归深度不太可能很深的情况下，你仍可以使用：</p>

<pre><code class="``Ruby">  class Node
  has_many :children, :class_name =&gt; "Node"

            def all_children
            self.children.flat_map do |child|
            [child] + child.all_children
            end
            end
            end
            ```

### 惰性枚举器

            惰性求值延迟了表达式的求值，在真正需要时才会求值。与 eager evaluation 相反，eager evaluation 当一个变量被赋值时、函数被调用时…甚至根本没用到变量等状况，都立马对表达式求值，惰性不是函数式编程的必需品，但这是个符合函数式范式的好策略（Haskell 大概是最佳的例子，瀰漫着懒惰的语言）。

            Ruby 所採用的基本上是 eager evaluation（虽然许多其它的语言，在条件还没满足前不对表达式求值，以及短路布林运算 `&amp;&amp;`, `||` 等）。然而，与任何内置高阶函数的语言一样，延迟求值是隐性支援，因为程序员自己决定区块何时被调用。

            Enumerators 同样 从 Ruby 1.9 开始支援(1.8 请用 backports)，它们提供了一个简单的介面来定义惰性 enumerables。经典的例子是构造一个枚举器，返回所有的自然数：

            ```Ruby
            require 'backports' # 1.8 才需要
            natural_numbers = Enumerator.new do |yielder|
            number = 1
            loop do
            yielder.yield number
            number += 1
            end
            end
            ```

            可以用更函数式的精神改写：

            ```Ruby
            natural_numbers = Enumerator.new do |yielder|
            (1..1.0/0).each do |number|
            yielder.yield number
            end
            end
            ```
</code></pre>

<p>natural_numbers.take(10)</p>

<h1>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</h1>

<pre><code class="``">
  现在，试试给 `natural_numbers` 做 `map`，发生什么事？它不会停止。标准的 enumerable 方法 (`map`, `select` 等）返回一个数组，所以在输入流是无穷大时，无法正常工作。让我们扩展 Enumerator 类别，比如加入这个惰性的 Enumerator#map：


      ```Ruby
      class Enumerator
      def map(&amp;block)
      Enumerator.new do |yielder|
      self.each do |value|
      yielder.yield(block.call(value))
      end
      end
      end
      end
      ```

      现在我们可以给所有自然数的流做 `map` 了：

      ```Ruby
      natural_numbers.map { |x| 2*x }.take(10)
# [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
      ```

  枚举器是用来构造惰性行为的区块的好东西，但你可以使用用懒惰风格，实作了所有 enumerable 方法的函式库：


  https://github.com/yhara/enumerable-lazy
</code></pre>

<p>  require &lsquo;enumerable/lazy&rsquo;
  (1..1.0/0).lazy.map { |x| 2*x }.take(10).to_a</p>

<h1>[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]</h1>

<pre><code class="``">
#### 惰性求值的好处

  1. 显而易见的好处: 无需在不必要的情况下，构造、储存完整的结构（也许，可以更有效率的使用 CPU 及内存）

  2. 不太显而易见的好处: 惰性求值使写程序不需要了解超出你所需的范围。让我们看一个例子：你写了某种解题工具，可以提供无数种解法，但在某个时候，你只想要前十种解法。你可能会这么写：
</code></pre>

<p>solver(input, :max => 10)
  &#8220;`</p>

<p>  当你与惰性结构一起工作时，不需要说什么时候该结束。调用者自己会决定他需要多少值。代码变得更简单，责任归属到对的地方，也就是调用者：</p>

<pre><code class="``Ruby">solver(input).take(10)
</code></pre>

<h3>一个实际的例子</h3>

<p>  练习：“前十个平方可被五整除的自然数的和是多少？”</p>

<pre><code class="``Ruby">  Integer::natural.select { |x| x**2 % 5 == 0 }.take(10).inject(:+) #=&gt; 275
</code></pre>

<p>  让我们跟等价的命令式版本来比较：</p>

<pre><code class="``Ruby">  n, num_elements, sum = 1, 0, 0
  while num_elements &lt; 10
  if n**2 % 5 == 0
  sum += n
  num_elements += 1
  end
  n += 1
  end
  sum #=&gt; 275
</code></pre>

<p>  我希望这个例子展示了这个文档裡讨论的函数式编程的优点：</p>

<ol>
<li><p> 更简洁: 你会撰写更少的代码。函数式程序处理的是表达式，而表达式可以连锁起来；命令式程序处理的是变量的改动（叙述式），而这不能连锁。</p></li>
<li><p> 更抽象: 你可以争论我们使用 <code>select</code>, <code>inject</code>…等等，来隐藏了一大堆代码，我很高兴你这么说，因为我们正是这么干的。将通用的、可重用的代码隐藏起来，这是所有编程的重点 –– 但函数式编程特别是关于如何撰写抽象。感到开心不是因为写了更少的代码，而是因为藉由认出可重用的模式，简化了代码的复杂性。</p></li>
<li><p> 更有声明式的味道: 看看命令式的版本，第一眼看起来是一沱无用的代码 –– 没有注解的话 –– 它会做什么你完全没有概念。你可能会说：“好吧，从这裡开始读，草草记下 <code>n</code> 与 <code>sum</code> 的值，进入某个迴圈，看看 <code>n</code> 与 <code>sum</code> 的值如何变化，看看最后一次迭代的情形” 等等。函数式版本另一方面是自我解释的，函数式版本描述、声明它在干的事，而不是如何干这件事。</p></li>
</ol>


<p>  “函数式编程就像是将你的问题叙述给数学家一样。命令式编程像是给白痴下指令” (arcus 在 Freenode #scheme 频道所说）</p>

<h3>结论</h3>

<pre><code>  更好的理解函数式编程的原理，帮助我们写出更清晰、重用性更高并更简洁的代码。Ruby 基本上是一个命令式语言，但它也有很大的函数式能力，明白什么时候用，及如何用（以及何时不该用）这些能力。将这句话当成你的座右铭吧 “状态是万恶的根源，尽可能避免它。”
</code></pre>

<h3>简报</h3>

<pre><code>  Workshop at [Conferencia Rails 2011](http://conferenciarails.org/): [Functional Programming with Ruby](http://public.arnau-sanchez.com/ruby-functional/) [(slideshare)](http://www.slideshare.net/tokland/functional-programming-with-ruby-9975242)
</code></pre>

<h3>延伸阅读</h3>

<pre><code>  http://en.wikipedia.org/wiki/Functional_programming
</code></pre>

<p><a href="http://www.defmacro.org/ramblings/fp.html">http://www.defmacro.org/ramblings/fp.html</a> <strong><a href="http://t.cn/zYaCDw7">译文</a></strong></p>

<p><a href="http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html">http://www.cse.chalmers.se/~rjmh/Papers/whyfp.html</a></p>

<p><a href="http://www.khelll.com/blog/ruby/ruby-and-functional-programming/">http://www.khelll.com/blog/ruby/ruby-and-functional-programming/</a></p>

<p><a href="http://www.bestechvideos.com/2008/11/30/rubyconf-2008-better-ruby-through-functional-programming">http://www.bestechvideos.com/2008/11/30/rubyconf-2008-better-ruby-through-functional-programming</a></p>

<p><a href="http://channel9.msdn.com/Blogs/pdc2008/TL11">http://channel9.msdn.com/Blogs/pdc2008/TL11</a></p>

<p><a href="http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey">http://www.infoq.com/presentations/Value-Identity-State-Rich-Hickey</a></p>

<h2>授权</h2>

<p>This document is licensed under the CC-By 3.0 License, which encourages you to share these documents. See <a href="http://creativecommons.org/licenses/by/3.0/">http://creativecommons.org/licenses/by/3.0/</a> for more details.</p>

<p><img alt="CC-By 3.0 License http://creativecommons.org/licenses/by/3.0/" style="border-width:0" src="http://i.creativecommons.org/l/by/3.0/88x31.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resque 数据库链接错误]]></title>
    <link href="http://tumayun.com/2013-01-25/resque-shu-ju-ku-lian-jie-cuo-wu/"/>
    <updated>2013-01-25T14:07:00+08:00</updated>
    <id>http://tumayun.com/2013-01-25/resque-shu-ju-ku-lian-jie-cuo-wu</id>
    <content type="html"><![CDATA[<p>  &nbsp;&nbsp;最近项目用的 <a href="https://github.com/defunkt/resque," title="Resque Github">Resque</a> 老是会有一些莫名其妙的问题，非常头疼！</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Mysql</span><span class="o">::</span><span class="ss">Error</span><span class="p">:</span> <span class="no">MySQL</span> <span class="n">server</span> <span class="n">has</span> <span class="n">gone</span> <span class="ss">away</span><span class="p">:</span> <span class="no">SHOW</span> <span class="no">FIELDS</span> <span class="no">FROM</span> <span class="sb">`deals`</span>
</span></code></pre></td></tr></table></div></figure>


<p>  实在是没办法了，然后仔细的去阅读了下 <a href="https://github.com/defunkt/resque," title="Resque Github">Resque</a> 的 <a href="https://github.com/defunkt/resque/wiki," title="Resque wiki">wiki</a>，有种恍然大悟的感觉。
  原来我遇到的问题大家都遇到过，并且给出了解决方案，就拿 Resque 数据库链接错误来说，<a href="https://github.com/defunkt/resque#mysqlerror-mysql-server-has-gone-away," title="Resque Github">Resque</a> 原作者已经有了推荐的解决方案，原文如下：<br/>
  &nbsp;&nbsp;If your workers remain idle for too long they may lose their MySQL connection.
  If that happens we recommend using <a href="https://gist.github.com/238999">this Gist</a>.<br/>
  &nbsp;&nbsp;然后我在项目 <code>config/initializers</code> 目录中的 <code>resque.rb</code> 文件中加入代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Resque</span><span class="o">.</span><span class="n">after_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">job</span><span class="o">|</span>
</span><span class='line'>  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">connection_handler</span><span class="o">.</span><span class="n">verify_active_connections!</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>问题就这样解决了！但是，引入一个 <code>Gem</code>，我连文档都没有仔细阅读，匆匆使用了事，现在想想真的很惭愧！
以后引入 <code>Gem</code> 最起码要将文档通读一边，有能力更应该通读源码！<br/>
谨记！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resque 重启命令]]></title>
    <link href="http://tumayun.com/2013-01-25/resque-zhong-qi-ming-ling/"/>
    <updated>2013-01-25T00:46:00+08:00</updated>
    <id>http://tumayun.com/2013-01-25/resque-zhong-qi-ming-ling</id>
    <content type="html"><![CDATA[<p>  &nbsp;&nbsp;现在 Resque 都应该加上 <a href="http://godrb.com" title="Ruby process monito">god</a> 监控，不然 Resque worker 进程很容易就死掉！
  <a href="http://godrb.com" title="Ruby process monito">god</a> 在 worker 进程挂掉后会自动重启，
  如果项目更新，需要手动重启所有的 worker，可以 kill 掉所有的 worker 进程(千万别 kill -9，最好是 kill -s QUIT，这样会在当前 job 完成后再退出)，
  方法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">ps</span> <span class="o">-</span><span class="n">e</span> <span class="o">-</span><span class="n">o</span> <span class="n">pid</span><span class="p">,</span><span class="n">command</span> <span class="o">|</span> <span class="n">grep</span> <span class="o">[</span><span class="n">r</span><span class="o">]</span><span class="n">esque</span><span class="o">-[</span><span class="mi">0</span><span class="o">-</span><span class="mi">9</span><span class="o">]</span> <span class="o">|</span> <span class="n">cut</span> <span class="o">-</span><span class="n">d</span> <span class="s1">&#39; &#39;</span> <span class="o">-</span><span class="n">f</span> <span class="mi">1</span> <span class="o">|</span> <span class="n">xargs</span>  <span class="n">kill</span> <span class="o">-</span><span class="n">s</span> <span class="no">QUIT</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 很慢的解决方法]]></title>
    <link href="http://tumayun.com/2013-01-25/git-hen-man-de-jie-jue-fang-fa/"/>
    <updated>2013-01-25T00:32:00+08:00</updated>
    <id>http://tumayun.com/2013-01-25/git-hen-man-de-jie-jue-fang-fa</id>
    <content type="html"><![CDATA[<p>  修改文件<code>/etc/ssh/ssh_config</code>, 添加如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">GSSAPIAuthentication</span> <span class="n">no</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
