<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rspec | Tumayun's Blog]]></title>
  <link href="http://tumayun.com/categories/rspec/atom.xml" rel="self"/>
  <link href="http://tumayun.com/"/>
  <updated>2014-09-03T17:19:45+08:00</updated>
  <id>http://tumayun.com/</id>
  <author>
    <name><![CDATA[tumayun]]></name>
    <email><![CDATA[tumayun.2010@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Let Let! Subject Subject! 的区别]]></title>
    <link href="http://tumayun.com/2013-03-13/let-let-subject-subject-de-qu-bie/"/>
    <updated>2013-03-13T13:56:00+08:00</updated>
    <id>http://tumayun.com/2013-03-13/let-let-subject-subject-de-qu-bie</id>
    <content type="html"><![CDATA[<p>当我遇到不明白的事物的时候，我会先看表象，了解到表象后，再深入了解其内部。不能说这种方法好，但是对我来说还是挺有效的（年轻的coder）。当然，最好还是直接深入内部去了解，这样更省事省时。<br/>
到正题，<a href="https://www.relishapp.com/rspec/rspec-core/v/2-13/docs/helper-methods/let-and-let!" title="let-and-let!">let 与 let的说明</a>如下：</p>

<pre><code>Use let to define a memoized helper method. The value will be cached
across multiple calls in the same example but not across examples.

Note that let is lazy-evaluated: it is not evaluated until the first time
the method it defines is invoked. You can use let! to force the method's
invocation before each example.
</code></pre>

<p>其实 <code>let</code> <code>let!</code> 以及 <code>subject</code> 都是 memoized_helpers，都是通过委托来定义一个消息的接收方！好处就是可以让代码更精炼，提高可读性，减少重复。  <br/>
要比较三者间的区别，必须先聊聊<code>let</code>。</p>

<pre><code class="ruby">def let(name, &amp;block)
  # We have to pass the block directly to `define_method` to
  # allow it to use method constructs like `super` and `return`.
  MemoizedHelpers.module_for(self).define_method(name, &amp;block)

  # Apply the memoization. The method has been defined in an ancestor
  # module so we can use `super` here to get the value.
  define_method(name) do
    __memoized.fetch(name) { |k| __memoized[k] = super(&amp;nil) }
  end
end
</code></pre>

<p>首先定义一个<code>MemoizedHelpers</code>，就是<code>memoize method</code>，只要调用过，就会被缓存起来，下次调用还是返回上次相同的对象。
验证起来也很简单，可以看看两次调用结果的 <code>object_id</code>。</p>

<pre><code class="ruby">describe User do
  let(:user) { User.new }

  it 'test user' do
    puts user.object_id
    puts user.object_id
  end
end
</code></pre>

<p>输出结果：
    70186054302440
    70186054302440</p>

<h3>四者间的区别</h3>

<p>首先上源码吧！ <a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L177" title="let">let</a> 源码上面已经贴了，
接下来看看 <a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L242" title="let!">let!</a>
<a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L276" title="subject">subject</a>
<a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L342" title="subject!">subject!</a>的源码。</p>

<h4>let!</h4>

<pre><code class="ruby">def let!(name, &amp;block)
  let(name, &amp;block)
    before { __send__(name) }
  end
</code></pre>

<h4>subject</h4>

<pre><code class="ruby">def subject(name=nil, &amp;block)
  if name
    let(name, &amp;block)
    subject { __send__ name }

    self::NamedSubjectPreventSuper.define_method(name) do
      raise NotImplementedError, "`super` in named subjects is not supported"
    end
  else
    let(:subject, &amp;block)
  end
end
</code></pre>

<p>可以看得出，<code>let!</code>其实也是调用<code>let</code>，并且在<code>before each</code>调用，区别就是<code>let!</code>会在<code>before each</code>调用，而<code>let</code>不会，区别仅此而已！
<code>subject</code>就稍微的复杂了一点，首先如果<code>subject</code>指定了 name ，则会先用<code>let</code>生成一个叫 name 的 <code>memoize method</code>，然后再次用<code>let</code>生成一个叫 subject 的<code>memoize method</code>。这样当调用 subject 的时候，其实最终调用的是 name 这个<code>memoize method</code>。当<code>subject</code>没有指定 name 的时候，则生成用<code>let</code>直接生成一个名叫 subject 的<code>memoize method</code>。额，是不是有点乱？其实细细体味一下这个方法，哇塞，真的很棒，还这么精炼！用到了递归，哈哈！但是我又有点奇怪，为什么要多此一聚呢，而不直接用<code>let</code>。恩，看源码。<br/>
<code>ruby
def should(matcher=nil, message=nil)
  RSpec::Expectations::PositiveExpectationHandler.handle_matcher(subject, matcher, message)
end
</code>
原来，<code>subject</code> 是用来配合 <code>should</code> 进行隐式调用的，在这里何为隐式调用？看源码里面的例子：
<code>ruby
describe CheckingAccount, "with $50" do
  subject { CheckingAccount.new(Money.new(50, :USD)) }
  it { should have_a_balance_of(Money.new(50, :USD)) }
  it { should_not be_overdrawn }
end
</code>
恩，<code>rspec</code>设计的就是这么巧妙！</p>

<h4>subject!</h4>

<p>这个就不需要多说了，也就是比<code>subject</code>多了句<code>before each</code>。
<code>ruby
def subject!(name=nil, &amp;block)
  subject(name, &amp;block)
  before { subject }
end
</code></p>

<h3>总结</h3>

<p>其实什么时候用<code>let</code> <code>subject</code>，这个可以根据字面意思来，如果是测试主题，并且需要多次调用，就可有写成一个<code>subject</code>。而非测试主题，又需要多次调用，则可以用<code>let</code>！</p>
]]></content>
  </entry>
  
</feed>
