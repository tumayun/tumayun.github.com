<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Tumayun's Blog]]></title>
  <link href="http://tumayun.com/categories/rails/atom.xml" rel="self"/>
  <link href="http://tumayun.com/"/>
  <updated>2014-08-24T22:23:31+08:00</updated>
  <id>http://tumayun.com/</id>
  <author>
    <name><![CDATA[tumayun]]></name>
    <email><![CDATA[tumayun.2010@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails 4 源码阅读之timestamps]]></title>
    <link href="http://tumayun.com/2013-06-29/rails-4-yuan-ma-yue-du-zhi-updated-ayu-created-at/"/>
    <updated>2013-06-29T19:20:00+08:00</updated>
    <id>http://tumayun.com/2013-06-29/rails-4-yuan-ma-yue-du-zhi-updated-ayu-created-at</id>
    <content type="html"><![CDATA[<p>最近开始看 Rails 4 的源码,打算写一系列的 Rails 4 源码阅读的文章,这是第一篇.</p>

<p>我是因为想知道 Rails 4 里面的 timestamps 是在什么时候赋值或者更新的,然后我翻看了下 Rails 4 的 ActiveRecord 代码.</p>

<p>在<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb">https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb</a>里面有<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb#L46">create_record</a>和<a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb#L60">update_record</a>方法,更新这些<code>timestamps</code>的操作就在这个里面了.</p>

<p>恩,应该是这样.<code>update_record</code>与<code>create_record</code>分别是创建和更新必掉的方法,所以如果有 timestamps 并且开启了<code>record_timestamps</code>就会去赋值或者更新这些字段了.</p>

<p>其实也可以从<code>save</code>开始阅读,<code>save</code>的过程可以简化成这样.</p>

<pre><code class="ruby"># https://github.com/rails/rails/blob/master/activerecord/lib/active_record//connection_adapters/abstract/transaction.rb#L270
def save(*) #:nodoc:
  rollback_active_record_state! do
    with_transaction_returning_status { super }
  end
end
.
.
.
# https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods/dirty.rb#L31
def save(*)
  if status = super
    @previously_changed = changes
    @changed_attributes.clear
  end
  status
end
.
.
.
# https://github.com/rails/rails/blob/master/activerecord/lib/active_record/validations.rb#L56
def save(options={})
  perform_validations(options) ? super : false
end
.
.
.
# https://github.com/rails/rails/tree/master/activerecord/lib/activerecord/persistence.rb#L105
def save(*)
  create_or_update
rescue ActiveRecord::RecordInvalid
  false
end
.
.
.
# https://github.com/rails/rails/tree/master/activerecord/lib/activerecord/callbacks.rb#L298
def create_or_update #:nodoc:
  run_callbacks(:save) { super }
end
.
.
.
# https://github.com/rails/rails/tree/master/activerecord/lib/activerecord/persistence.rb#L464
def create_or_update
  raise ReadOnlyRecord if readonly?
  result = new_record? ? create_record : update_record
  result != false
end
.
.
.
# https://github.com/rails/rails/blob/master/activerecord/lib/active_record/timestamp.rb#L46
def create_record
  if self.record_timestamps
    current_time = current_time_from_proper_timezone

    all_timestamp_attributes.each do |column|
      if respond_to?(column) &amp;&amp; respond_to?("#{column}=") &amp;&amp; self.send(column).nil?
        write_attribute(column.to_s, current_time)
      end
    end
  end

  super
end
.
.
.
# https://github.com/rails/rails/blob/master/activerecord/lib/active_record/callbacks.rb#L302
def create_record #:nodoc:
  run_callbacks(:create) { super }
end
.
.
.
# https://github.com/rails/rails/blob/master/activerecord/lib/active_record/persistence.rb#L483
def create_record(attribute_names = @attributes.keys)
  attributes_values = arel_attributes_with_values_for_create(attribute_names)

  new_id = self.class.unscoped.insert attributes_values
  self.id ||= new_id if self.class.primary_key

  @new_record = false
  id
end
</code></pre>

<p>哇,就是这样的顺序,但是感觉有点复杂啊,<code>save</code>到处都是,通过<code>super</code>关键字逐层调用,就像一个<code>rack stack</code>一样!最主要的是我们要知道<code>save</code>的调用链是怎么样的,这个可以看<code>ActiveRecord::Base.ancestors</code>.</p>

<pre><code class="ruby">puts ActiveRecord::Base.ancestors.join("\n")
ActiveRecord::Base
ActiveRecord::Core
ActiveRecord::Store
ActiveRecord::Serialization
ActiveModel::Serializers::Xml
ActiveModel::Serializers::JSON
ActiveModel::Serialization
ActiveRecord::Reflection
ActiveRecord::Transactions
ActiveRecord::Aggregations
ActiveRecord::NestedAttributes
ActiveRecord::AutosaveAssociation
ActiveModel::SecurePassword
ActiveRecord::Associations
ActiveRecord::Timestamp
ActiveModel::Validations::Callbacks
ActiveRecord::Callbacks
ActiveRecord::AttributeMethods::Serialization
ActiveRecord::AttributeMethods::Dirty
ActiveModel::Dirty
ActiveRecord::AttributeMethods::TimeZoneConversion
ActiveRecord::AttributeMethods::PrimaryKey
ActiveRecord::AttributeMethods::Query
ActiveRecord::AttributeMethods::BeforeTypeCast
ActiveRecord::AttributeMethods::Write
ActiveRecord::AttributeMethods::Read
ActiveRecord::AttributeMethods
ActiveModel::AttributeMethods
ActiveRecord::Locking::Pessimistic
ActiveRecord::Locking::Optimistic
ActiveRecord::CounterCache
ActiveRecord::Validations
ActiveModel::Validations::HelperMethods
ActiveSupport::Callbacks
ActiveModel::Validations
ActiveRecord::Integration
ActiveModel::Conversion
ActiveRecord::AttributeAssignment
ActiveModel::ForbiddenAttributesProtection
ActiveModel::DeprecatedMassAssignmentSecurity
ActiveRecord::Sanitization
ActiveRecord::Scoping::Named
ActiveRecord::Scoping::Default
ActiveRecord::Scoping
ActiveRecord::Inheritance
ActiveRecord::ModelSchema
ActiveRecord::ReadonlyAttributes
ActiveRecord::Persistence
Object
JSON::Ext::Generator::GeneratorMethods::Object
ActiveSupport::Dependencies::Loadable
PP::ObjectMixin
Kernel
BasicObject
</code></pre>

<p>这样就能知道调用链的情况了.当然还可以去<code>debugger</code>.</p>

<p>恩,<code>save</code>就是这样!<code>timestamps</code>又明白了,太棒了~!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 技巧之 Safe Name]]></title>
    <link href="http://tumayun.com/2013-06-23/rails-ji-qiao-zhi-safe-name/"/>
    <updated>2013-06-23T23:51:00+08:00</updated>
    <id>http://tumayun.com/2013-06-23/rails-ji-qiao-zhi-safe-name</id>
    <content type="html"><![CDATA[<p>当使用元编程动态生成代码时,可能会有一些不符合命名规范的名称,那么就可以用到下面的技巧,姑且称之为<code>safe name</code>.</p>

<p>以下出自 Rails 源码 <a href="https://github.com/rails/rails/blob/master/activerecord/lib/active_record/attribute_methods/read.rb#L50">define_method_attribute</a></p>

<pre><code class="ruby"># We want to generate the methods via module_eval rather than
# define_method, because define_method is slower on dispatch and
# uses more memory (because it creates a closure).
#
# But sometimes the database might return columns with
# characters that are not allowed in normal method names (like
# 'my_column(omg)'. So to work around this we first define with
# the __temp__ identifier, and then use alias method to rename
# it to what we want.
#
# We are also defining a constant to hold the frozen string of
# the attribute name. Using a constant means that we do not have
# to allocate an object on each call to the attribute method.
# Making it frozen means that it doesn't get duped when used to
# key the @attributes_cache in read_attribute.
def define_method_attribute(name)
  safe_name = name.unpack('h*').first
  generated_attribute_methods.module_eval &lt;&lt;-STR, __FILE__, __LINE__ + 1
  def __temp__#{safe_name}
  read_attribute(AttrNames::ATTR_#{safe_name}) { |n| missing_attribute(n, caller) }
  end
  alias_method #{name.inspect}, :__temp__#{safe_name}
  undef_method :__temp__#{safe_name}
  STR
end
</code></pre>

<p><code>safe name</code>技巧的原理就是构造符合命名规范的名称(通过一些算法,像unpack,hash都可以),
  像这里的话是通过<code>unpack('h*')</code>生成一个字串<code>safe_name</code>.</p>

<p>  这个技巧真心很赞!!!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Let Let! Subject Subject! 的区别]]></title>
    <link href="http://tumayun.com/2013-03-13/let-let-subject-subject-de-qu-bie/"/>
    <updated>2013-03-13T13:56:00+08:00</updated>
    <id>http://tumayun.com/2013-03-13/let-let-subject-subject-de-qu-bie</id>
    <content type="html"><![CDATA[<p>当我遇到不明白的事物的时候，我会先看表象，了解到表象后，再深入了解其内部。不能说这种方法好，但是对我来说还是挺有效的（年轻的coder）。当然，最好还是直接深入内部去了解，这样更省事省时。<br/>
到正题，<a href="https://www.relishapp.com/rspec/rspec-core/v/2-13/docs/helper-methods/let-and-let!" title="let-and-let!">let 与 let的说明</a>如下：</p>

<pre><code>Use let to define a memoized helper method. The value will be cached
across multiple calls in the same example but not across examples.

Note that let is lazy-evaluated: it is not evaluated until the first time
the method it defines is invoked. You can use let! to force the method's
invocation before each example.
</code></pre>

<p>其实 <code>let</code> <code>let!</code> 以及 <code>subject</code> 都是 memoized_helpers，都是通过委托来定义一个消息的接收方！好处就是可以让代码更精炼，提高可读性，减少重复。  <br/>
要比较三者间的区别，必须先聊聊<code>let</code>。</p>

<pre><code class="ruby">def let(name, &amp;block)
  # We have to pass the block directly to `define_method` to
  # allow it to use method constructs like `super` and `return`.
  MemoizedHelpers.module_for(self).define_method(name, &amp;block)

  # Apply the memoization. The method has been defined in an ancestor
  # module so we can use `super` here to get the value.
  define_method(name) do
    __memoized.fetch(name) { |k| __memoized[k] = super(&amp;nil) }
  end
end
</code></pre>

<p>首先定义一个<code>MemoizedHelpers</code>，就是<code>memoize method</code>，只要调用过，就会被缓存起来，下次调用还是返回上次相同的对象。
验证起来也很简单，可以看看两次调用结果的 <code>object_id</code>。</p>

<pre><code class="ruby">describe User do
  let(:user) { User.new }

  it 'test user' do
    puts user.object_id
    puts user.object_id
  end
end
</code></pre>

<p>输出结果：
    70186054302440
    70186054302440</p>

<h3>四者间的区别</h3>

<p>首先上源码吧！ <a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L177" title="let">let</a> 源码上面已经贴了，
接下来看看 <a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L242" title="let!">let!</a>
<a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L276" title="subject">subject</a>
<a href="https://github.com/rspec/rspec-core/blob/master/lib/rspec/core/memoized_helpers.rb#L342" title="subject!">subject!</a>的源码。</p>

<h4>let!</h4>

<pre><code class="ruby">def let!(name, &amp;block)
  let(name, &amp;block)
    before { __send__(name) }
  end
</code></pre>

<h4>subject</h4>

<pre><code class="ruby">def subject(name=nil, &amp;block)
  if name
    let(name, &amp;block)
    subject { __send__ name }

    self::NamedSubjectPreventSuper.define_method(name) do
      raise NotImplementedError, "`super` in named subjects is not supported"
    end
  else
    let(:subject, &amp;block)
  end
end
</code></pre>

<p>可以看得出，<code>let!</code>其实也是调用<code>let</code>，并且在<code>before each</code>调用，区别就是<code>let!</code>会在<code>before each</code>调用，而<code>let</code>不会，区别仅此而已！
<code>subject</code>就稍微的复杂了一点，首先如果<code>subject</code>指定了 name ，则会先用<code>let</code>生成一个叫 name 的 <code>memoize method</code>，然后再次用<code>let</code>生成一个叫 subject 的<code>memoize method</code>。这样当调用 subject 的时候，其实最终调用的是 name 这个<code>memoize method</code>。当<code>subject</code>没有指定 name 的时候，则生成用<code>let</code>直接生成一个名叫 subject 的<code>memoize method</code>。额，是不是有点乱？其实细细体味一下这个方法，哇塞，真的很棒，还这么精炼！用到了递归，哈哈！但是我又有点奇怪，为什么要多此一聚呢，而不直接用<code>let</code>。恩，看源码。<br/>
<code>ruby
def should(matcher=nil, message=nil)
  RSpec::Expectations::PositiveExpectationHandler.handle_matcher(subject, matcher, message)
end
</code>
原来，<code>subject</code> 是用来配合 <code>should</code> 进行隐式调用的，在这里何为隐式调用？看源码里面的例子：
<code>ruby
describe CheckingAccount, "with $50" do
  subject { CheckingAccount.new(Money.new(50, :USD)) }
  it { should have_a_balance_of(Money.new(50, :USD)) }
  it { should_not be_overdrawn }
end
</code>
恩，<code>rspec</code>设计的就是这么巧妙！</p>

<h4>subject!</h4>

<p>这个就不需要多说了，也就是比<code>subject</code>多了句<code>before each</code>。
<code>ruby
def subject!(name=nil, &amp;block)
  subject(name, &amp;block)
  before { subject }
end
</code></p>

<h3>总结</h3>

<p>其实什么时候用<code>let</code> <code>subject</code>，这个可以根据字面意思来，如果是测试主题，并且需要多次调用，就可有写成一个<code>subject</code>。而非测试主题，又需要多次调用，则可以用<code>let</code>！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Resque 数据库链接错误]]></title>
    <link href="http://tumayun.com/2013-01-25/resque-shu-ju-ku-lian-jie-cuo-wu/"/>
    <updated>2013-01-25T14:07:00+08:00</updated>
    <id>http://tumayun.com/2013-01-25/resque-shu-ju-ku-lian-jie-cuo-wu</id>
    <content type="html"><![CDATA[<p>  &nbsp;&nbsp;最近项目用的 <a href="https://github.com/defunkt/resque," title="Resque Github">Resque</a> 老是会有一些莫名其妙的问题，非常头疼！
<code>ruby
Mysql::Error: MySQL server has gone away: SHOW FIELDS FROM `deals`
</code>
  实在是没办法了，然后仔细的去阅读了下 <a href="https://github.com/defunkt/resque," title="Resque Github">Resque</a> 的 <a href="https://github.com/defunkt/resque/wiki," title="Resque wiki">wiki</a>，有种恍然大悟的感觉。
  原来我遇到的问题大家都遇到过，并且给出了解决方案，就拿 Resque 数据库链接错误来说，<a href="https://github.com/defunkt/resque#mysqlerror-mysql-server-has-gone-away," title="Resque Github">Resque</a> 原作者已经有了推荐的解决方案，原文如下：<br/>
  &nbsp;&nbsp;If your workers remain idle for too long they may lose their MySQL connection.
  If that happens we recommend using <a href="https://gist.github.com/238999">this Gist</a>.<br/>
  &nbsp;&nbsp;然后我在项目 <code>config/initializers</code> 目录中的 <code>resque.rb</code> 文件中加入代码：
<code>ruby
Resque.after_fork do |job|
  ActiveRecord::Base.connection_handler.verify_active_connections!
end
</code>
问题就这样解决了！但是，引入一个 <code>Gem</code>，我连文档都没有仔细阅读，匆匆使用了事，现在想想真的很惭愧！
以后引入 <code>Gem</code> 最起码要将文档通读一边，有能力更应该通读源码！<br/>
谨记！</p>
]]></content>
  </entry>
  
</feed>
